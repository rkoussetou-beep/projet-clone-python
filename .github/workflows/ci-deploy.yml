name: CI/CD Python + SSH Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # √âtape 1 : Cloner ton d√©p√¥t principal
      - name: Checkout du d√©p√¥t
        uses: actions/checkout@v4

      # √âtape 2 : Cloner un d√©p√¥t Python externe (optionnel)
      - name: Cloner un autre d√©p√¥t Python
        run: |
          git clone https://github.com/ricardo-kali2025/projet-clone-python.git external-python-repo
          cd external-python-repo
          ls -la

      # √âtape 3 : Installer Python
      - name: Installer Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # √âtape 4 : Installer les d√©pendances
      - name: Installer les d√©pendances
        run: |
          cd external-python-repo
          pip install -r requirements.txt

      # √âtape 5 : Lancer les tests unitaires
      - name: Lancer les tests
        run: |
          cd external-python-repo
          pytest -v || true  # (true pour √©viter un √©chec bloquant si pas de tests)

      # √âtape 6 : D√©ploiement SSH sur ton serveur
      - name: D√©ployer sur serveur distant
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            echo "üì¶ D√©ploiement sur le serveur distant..."
            cd /home/${{ secrets.SSH_USER }}/app || mkdir -p /home/${{ secrets.SSH_USER }}/app && cd /home/${{ secrets.SSH_USER }}/app
            if [ -d "external-python-repo" ]; then
              cd external-python-repo && git pull
            else
              git clone https://github.com/ricardo-kali2025/projet-clone-python.git external-python-repo
            fi
            cd external-python-repo
            pip install -r requirements.txt
            nohup python3 app.py &
